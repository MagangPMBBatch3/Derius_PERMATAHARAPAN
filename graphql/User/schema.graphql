type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    password: String
    remember_token: String
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
    profile: UserProfile @hasOne
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
    email_verified_at: DateTime
}

extend type Query {
    allUsers: [User!] @all(model: "App\\Models\\User")
    allUsersArsip: [User!] @field(resolver: "App\\GraphQL\\User\\Queries\\UserQuery@allArsip")
    
    user(id: ID! @eq(key: "id")): User @find(model: "App\\Models\\User")
    
    userByEmail(email: String! @where(operator: "like", key: "email")): [User!] 
        @all(model: "App\\Models\\User")

    me: User @field(resolver: "App\\GraphQL\\User\\Queries\\UserQuery@me")
}

extend type Mutation {
    createUser(input: CreateUserInput! @spread): User 
        @create(model: "App\\Models\\User")
    
    updateUser(
        id: ID! @eq(key: "id"),
        input: UpdateUserInput! @spread
    ): User @update(model: "App\\Models\\User")
    
    deleteUser(id: ID! @eq(key: "id")): User 
        @delete(model: "App\\Models\\User")
    
    restoreUser(id: ID!): User 
        @field(resolver: "App\\GraphQL\\User\\Mutations\\UserMutation@restore")
    
    forceDeleteUser(id: ID!): User 
        @field(resolver: "App\\GraphQL\\User\\Mutations\\UserMutation@forceDelete")
}